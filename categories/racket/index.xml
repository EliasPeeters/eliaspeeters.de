<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Racket on Elias Peeters</title><link>https://eliaspeeters.de/categories/racket/</link><description>Recent content in Racket on Elias Peeters</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 20 Feb 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://eliaspeeters.de/categories/racket/index.xml" rel="self" type="application/rss+xml"/><item><title>Racket examples</title><link>https://eliaspeeters.de/blog/racketexamples/</link><pubDate>Thu, 20 Feb 2020 00:00:00 +0000</pubDate><guid>https://eliaspeeters.de/blog/racketexamples/</guid><description>A list of example programms that may be helpful This is just a collection with programms in racket. These solutions may not be perfect but maybe they can help somebody in need ðŸ˜‰.
Theater costs An old-style movie theater has a simple profit function. Each customer pays $5 per ticket. Every performance costs the theater $20, plus $.50 per attendee. Develop the function total-profit. It consumes the number of attendees (of a show) and produces how much income the attendees produce.</description></item><item><title>Racket rekursion</title><link>https://eliaspeeters.de/blog/rekursion/</link><pubDate>Thu, 20 Feb 2020 00:00:00 +0000</pubDate><guid>https://eliaspeeters.de/blog/rekursion/</guid><description>A list of example programms that use rekursion This is just a collection with programms in racket that use rekursion. These solutions may not be perfect but maybe they can help somebody in need ðŸ˜‰.
Sum up all elements of a list (define prod (lambda [input] (cond [(empty? input) 1] [else (* (first input) (prod (rest input)))]))) (prod &amp;#39;(3 4 6))Multiplies all elements of a list (define prod (lambda [input] (cond [(empty?</description></item></channel></rss>